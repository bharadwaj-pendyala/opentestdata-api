import os
import pytest
import logging
from secrets import token_urlsafe
from flask.testing import FlaskClient
from ..app import create_app
from ..db import db
from ..db.models import User


os.environ['FLASK_ENV'] = 'testing'
logger = logging.getLogger()


@pytest.fixture(scope='package')
def client():
    """Fixture to clear and set up the database and init an API client"""

    app = create_app()
    app.test_client_class = JsonRespClient
    with app.test_client() as c:
        with app.app_context():
            logger.info('Dropping all database tables')
            db.drop_all()
            logger.info('Recreating all database tables')
            db.create_all()
        yield c


@pytest.fixture(scope='function')
def random_username():
    return 'test_user_%s' % token_urlsafe(16)


@pytest.fixture(scope='function')
def random_email():
    return 'email_%s@test.com' % token_urlsafe(16)


@pytest.fixture(scope='function')
def random_password():
    return token_urlsafe(16)


@pytest.fixture(scope='function')
def user(random_username, random_email, random_password):
    u = User(username=random_username, email=random_email)
    u.set_password(random_password)
    db.session.add(u)
    db.session.commit()
    return u


class JsonRespClient(FlaskClient):
    """More ergonomic test API client

    Basically traps calls to client.get, client.post, client.delete, and
    turns their JSON responses into actual python values, so we can assert
    based on responses easily. In case of a non-200 response, an exception is
    raised. If this behavior is not desired, pass raw=True.

    We achieve this by overriding the base 'open' method and inspecting the
    response.
    """
    def open(self, *args, **kwargs):
        raw = False
        if 'raw' in kwargs:
            raw = True
            del kwargs['raw']

        resp = super().open(*args, **kwargs)

        if not raw and kwargs['method'] in ['GET', 'POST', 'DELETE']:
            if resp.status != '200 OK':
                raise Exception('Got unexpected %s response for request. '
                                'Body was: "%s"' % (resp.status, resp.data))

            return resp.get_json()

        return resp
