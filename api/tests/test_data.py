def test_can_create_datum(client, user, datum_string_dict):
    assert len(user.data) == 0
    resp = client.post('/data', headers=user.auth_headers,
                       json=datum_string_dict)
    resp_data = dict(
        **datum_string_dict,
        user_id=user.id
    )
    assert 'created_at' in resp
    assert 'id' in resp
    del resp['created_at']
    del resp['id']
    assert resp == resp_data
    assert len(user.data) == 1


def test_create_datum_requires_login(client, datum_string_dict):
    resp = client.post('/data', json=datum_string_dict, raw=True).get_json()
    assert resp['status'] == 401
    assert 'authorization' in resp['detail']


def test_cant_create_datum_without_required_fields(client, user, datum_string_dict):
    req_fields = ['name', 'type', 'mode', 'datum']
    for req_field in req_fields:
        bad_input = dict(**datum_string_dict)
        del bad_input[req_field]
        resp = client.post('/data', headers=user.auth_headers, json=bad_input, raw=True).get_json()
        assert resp['status'] == 400
        assert req_field in resp['detail']
    assert user.data == []


def test_cant_create_datum_with_extra_fields(client, user, datum_string_dict):
    bad_input = dict(**datum_string_dict)
    bad_input['extra'] = 'foo'
    resp = client.post('/data', headers=user.auth_headers, json=bad_input, raw=True).get_json()
    assert resp['status'] == 400
    assert 'extra' in resp['detail']


def test_cant_create_datum_with_bad_input(client, user, datum_string_dict):
    bad_input = dict(**datum_string_dict)
    bad_input['type'] = 'STRRR'
    resp = client.post('/data', headers=user.auth_headers, json=bad_input, raw=True).get_json()
    assert resp['status'] == 400
    assert 'STR' in resp['detail']


def test_cant_create_datum_that_already_exists(client, user, datum_string_dict):
    assert len(user.data) == 0
    datum = client.post('/data', headers=user.auth_headers, json=datum_string_dict)
    assert len(user.data) == 1
    new_dict = dict(**datum_string_dict)
    new_dict['name'] = 'a new name'
    resp = client.post('/data', headers=user.auth_headers, json=new_dict, raw=True).get_json()
    assert resp['status'] == 400
    assert 'already' in resp['detail']
    assert f'id {datum["id"]}' in resp['detail']
    assert len(user.data) == 1
