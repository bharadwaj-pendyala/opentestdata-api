from secrets import token_urlsafe
from ..db.models import User, Datum, DatumType, DatumMode
from ..handlers.auth import login


def make_random_username():
    return f'test_user_{token_urlsafe(16)}'


def make_random_password():
    return token_urlsafe(16)


def make_random_email():
    return f'email_{token_urlsafe(16)}@test.com'


def make_random_bio():
    return f'I am a {token_urlsafe(8)} and work for {token_urlsafe(8)}'


def make_user(username=None, email=None, password=None, bio=None, is_admin=False):
    if username is None:
        username = make_random_username()
    if email is None:
        email = make_random_email()
    if password is None:
        password = make_random_password()
    if bio is None:
        bio = make_random_bio()

    u = User.create(username, email, password, bio, is_admin)
    u.jwt_token = login({
        'username': u.username,
        'password': password
    })['token']
    u.auth_headers = {'Authorization': 'Bearer %s' % u.jwt_token}
    u.original_password = password
    return u


def make_datum_dict(name=None, type=None, mode=None, datum=None):
    if type is None:
        type = 'STR'
    if mode is None:
        mode = 'NEUTRAL'
    if datum is None:
        datum = token_urlsafe(8)
    if name is None:
        name = f'Random datum {datum}'
    return dict(name=name, type=type, mode=mode, datum=datum)


def make_datum(author=None, datum_dict=None):
    if datum_dict is None:
        datum_dict = make_datum_dict()
    if author is None:
        author = make_user()
    datum = Datum.create(author=author,
                         datum=datum_dict['datum'],
                         name=datum_dict['name'],
                         type=DatumType(datum_dict['type']),
                         mode=DatumMode(datum_dict['mode']))
    # repopulate auth fields on the author object
    datum.author = author
    return datum
