from werkzeug.security import generate_password_hash, check_password_hash
from .. import db
from .base import BaseModel
from .ec_token import EmailConfirmationToken


class User(BaseModel):
    __tablename__ = 'users'

    # fields
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))
    has_avatar = db.Column(db.Boolean(), default=False)
    # TODO if has_avatar is false, maybe we cache the gravatar image url?
    is_admin = db.Column(db.Boolean(), default=False)
    is_email_confirmed = db.Column(db.Boolean(), default=False)

    private_fields = ['email', 'password_hash', 'is_admin',
                      'is_email_confirmed']
    public_fields = ['username', 'avatar_url']

    # relationships
    ec_token = db.relationship('EmailConfirmationToken', back_populates='user',
                               uselist=False)
    data = db.relationship('Datum', back_populates='author')

    def __repr__(self):
        return '<User %s>' % self.username

    @property
    def avatar_url(self):
        # TODO get url from cloud storage via id or maybe gravatar
        return "http://foo.com/img.png"

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    @staticmethod
    def create(cls, username, email, password, is_admin=False):
        # TODO add avatar upload here?
        token = EmailConfirmationToken()
        token.generate_token()
        user = User(username=username, email=email, is_admin=is_admin,
                    ec_token=token)
        user.set_password(password)
        db.session.add(user)
        db.session.add(token)
        db.session.commit()
        return user
