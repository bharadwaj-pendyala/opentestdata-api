from werkzeug.security import generate_password_hash, check_password_hash
from flask import jsonify
from .. import db
from .base import BaseModel


class User(BaseModel):
    __tablename__ = 'users'

    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))
    has_avatar = db.Column(db.Boolean(), default=False)
    # TODO if has_avatar is false, maybe we cache the gravatar image url?
    is_admin = db.Column(db.Boolean(), default=False)
    is_email_confirmed = db.Column(db.Boolean(), default=False)

    def __repr__(self):
        return '<User %s>' % self.username

    def avatar_url(self):
        # TODO get url from cloud storage via id or maybe gravatar
        return "http://foo.com/img.png"

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def to_json(self, is_public=True):
        # TODO figure out right privacy model for returned fields
        return jsonify({
            'username': self.username,
            'avatar': self.avatar_url(),
        })
