from werkzeug.exceptions import BadRequest, Unauthorized
from ..db import db
from ..db.models import Datum, DatumType, DatumMode
from .auth import auth
from .util import get_datum


@auth()
def create(auth_user, body):
    try:
        datum = Datum.create(author=auth_user,
                             name=body.get('name'),
                             type=DatumType(body.get('type')),
                             mode=DatumMode(body.get('mode')),
                             datum=body.get('datum'))
    except Exception as e:
        err_msg = str(e)
        raise BadRequest(f'Could not add datum: {err_msg}')

    return datum.to_obj(whos_asking=auth_user)


@auth()
@get_datum()
def update(datum, auth_user, body):
    if not auth_user.is_admin and auth_user.id != datum.user_id:
        raise Unauthorized("You don't have permission to update that datum")

    # ensure the new details wouldn't clash with another existing datum
    existing_datum = Datum.find(body.get('datum'), DatumType(body.get('type')),
                                DatumMode(body.get('mode')))
    if existing_datum is not None and existing_datum.id != datum.id:
        raise BadRequest(f'The datum details you provided are already '
                         f'associated with datum id {existing_datum.id}')

    datum.name = body.get('name')
    datum.type = DatumType(body.get('type'))
    datum.mode = DatumMode(body.get('mode'))
    datum.datum = body.get('datum')

    db.session.commit()

    return datum.to_obj(whos_asking=auth_user)
