from werkzeug.exceptions import NotFound, Unauthorized, BadRequest
from ..db import db
from ..db.models import User, EmailConfirmationToken, Action, ActionType
from .auth import auth
from .util import get_user
from sqlalchemy import exc


def signup(body):
    try:
        user = User.create(body.get('username'), body.get('email'),
                           body.get('password'))
    except exc.IntegrityError:
        raise BadRequest(f'Username {body.get("username")} already exists')

    Action.create(ActionType.SIGNUP, user)
    return user.to_obj(whos_asking=user)


def confirm_email(token):
    try:
        EmailConfirmationToken.confirm(token)
    except Exception as e:
        raise NotFound(str(e))

    return {'confirmed': True}


@auth()
@get_user()
def detail(user, auth_user):
    return user.to_obj(whos_asking=auth_user)


@auth()
@get_user()
def update(user, auth_user, body):
    if not auth_user.is_admin and user.id != auth_user.id:
        raise Unauthorized("You don't have permission to update that user")

    if (body.get('email')):
        user.update_email(body.get('email'))
    if (body.get('password')):
        user.set_password(body.get('password'))
    db.session.commit()
    return user.to_obj(whos_asking=auth_user)


@auth(admin=True)
@get_user()
def promote(user, auth_user, body):
    user.is_admin = True
    db.session.commit()
    return user.to_obj(whos_asking=auth_user)
